{"version":3,"sources":["components/box/index.js","components/header/index.js","App.js","serviceWorker.js","index.js"],"names":["Box","props","x","y","speed","useState","animationName","setAnimationName","useEffect","styleSheet","document","styleSheets","Math","round","random","keyframes","insertRule","cssRules","length","boxStyle","animationTimingFunction","animationDuration","animationDelay","animationIterationCount","animationDirection","animationFillMode","className","style","Header","setSpeed","name","placeholder","autoComplete","value","type","onChange","e","target","App","setX","setY","onClick","pageX","pageY","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sRA4CeA,G,MAzCH,SAAAC,GAAU,IACdC,EAAgBD,EAAhBC,EAAIC,EAAYF,EAAZE,EAAGC,EAASH,EAATG,MADM,EAGsBC,mBAAS,IAH/B,mBAGbC,EAHa,KAGEC,EAHF,KAKpBC,qBAAU,WACT,IAAMC,EAAaC,SAASC,YAAY,GAElCL,EAAa,mBAAeM,KAAKC,MAAsB,IAAhBD,KAAKE,WAE5CC,EAAS,6BACUT,EADV,0DAE2C,IAAhBM,KAAKE,SAFhC,eAEqE,IAAhBF,KAAKE,SAF1D,6DAG2C,IAAhBF,KAAKE,SAHhC,eAGqE,IAAhBF,KAAKE,SAH1D,6DAI4BZ,EAJ5B,eAIoCC,EAAI,GAJxC,iBAOdM,EAAWO,WAAWD,EAAWN,EAAWQ,SAASC,QAErDX,EAAiBD,KAChB,CAACJ,EAAGC,IAGP,IAAMgB,EAAW,CAChBb,cAAeA,EACfc,wBAAyB,cACzBC,kBAAmBjB,EAAQ,KAC3BkB,eAAgB,OAChBC,wBAAyB,EACzBC,mBAAoB,SAClBC,kBAAmB,YAGtB,OACE,yBACCC,UAAU,MACVC,MAAOR,MCbIS,G,MAvBA,SAAA3B,GAAU,IAAD,EACGI,mBAAS,IADZ,mBAChBD,EADgB,KACTyB,EADS,KASvB,OACE,gCACK,2BACCC,KAAK,QACLC,YAAY,sCACZC,aAAa,MACbC,MAAO7B,EACP8B,KAAK,SACLC,SAda,SAAAC,GAAO,IACnBH,EAAUG,EAAEC,OAAZJ,MACRJ,EAASI,GACThC,EAAMkC,SAASF,SCsBFK,G,MA1BH,SAAArC,GAAU,IAAD,EAEDI,mBAAS,GAFR,mBAEZH,EAFY,KAETqC,EAFS,OAGDlC,mBAAS,IAHR,mBAGZF,EAHY,KAGTqC,EAHS,OAIOnC,mBAAS,KAJhB,mBAIZD,EAJY,KAILyB,EAJK,KAgBnB,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,CAAQS,SANQ,SAAAF,GAClBJ,EAASI,MAMP,0BAAMP,UAAU,OAAOe,QAbP,SAAAL,GAElBG,EAAKH,EAAEM,OACPF,EAAKJ,EAAEO,SAWH,kBAAC,EAAD,CAAKzC,EAAGA,EAAGC,EAAGA,EAAGC,MAAOA,QCbZwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzC,SAAS0C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5061be65.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './box.scss';\n\nconst Box = props => {\n\tconst {x , y, speed} = props;\n\n\tconst [animationName, setAnimationName] = useState('');\n\n\tuseEffect(() => {\n\t\tconst styleSheet = document.styleSheets[0];\n\n\t\tconst animationName = `animation${Math.round(Math.random() * 100)}`;\n\n\t\tconst keyframes =\n\t    `@-webkit-keyframes ${animationName} {\n\t        10% {-webkit-transform:translate(${Math.random() * 100}px, ${Math.random() * 300}px)} \n\t        90% {-webkit-transform:translate(${Math.random() * 100}px, ${Math.random() * 300}px)}\n\t        100% {-webkit-transform:translate(${x}px, ${y - 60}px)}\n\t    }`;\n\t    \n\t \tstyleSheet.insertRule(keyframes, styleSheet.cssRules.length);\n\n\t \tsetAnimationName(animationName);\n\t}, [x, y])\n\t\n\n\tconst boxStyle = {\n\t\tanimationName: animationName,\n\t\tanimationTimingFunction: \"ease-in-out\",\n\t\tanimationDuration: speed + 'ms',\n\t\tanimationDelay: \"0.0s\",\n\t\tanimationIterationCount: 1,\n\t\tanimationDirection: 'normal',\n    animationFillMode: 'forwards'\n\t}\n\n\treturn (\n\t\t\t<div \n\t\t\t\tclassName=\"box\" \n\t\t\t\tstyle={boxStyle}>\n\t\t\t</div>\n\t\t)\n}\n\nexport default Box;","import React, { useState } from 'react';\nimport './header.scss';\n\nconst Header = props => {\n\tconst [speed, setSpeed] = useState(\"\");\n\n\tconst handleChange = e =>  {\n\t\tconst { value } = e.target;\n\t\tsetSpeed(value);\n\t\tprops.onChange(value);\n\t}\n\n\treturn (\n\t\t\t<header>\n        <input \n        \tname=\"speed\" \n        \tplaceholder=\"Input animate speed ms (Exam: 2000)\" \n        \tautoComplete=\"off\" \n        \tvalue={speed}\n        \ttype=\"number\"\n        \tonChange={handleChange}\n        />\n      </header>\n\t\t)\n}\n\nexport default Header;","import React, { useState } from 'react';\nimport Box from \"./components/box\";\nimport Header from \"./components/header\";\nimport './app.scss';\n\nconst App = props => {\n\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(60);\n  const [speed, setSpeed] = useState(2000);\n\n  const handleClick = e => {\n    // e.preventDefault();\n    setX(e.pageX);\n    setY(e.pageY);\n  }\n\n  const updateSpeed = value => {\n    setSpeed(value);\n  }\n\n  return (\n    <div className=\"app\">\n      <Header onChange={updateSpeed} />\n      <main className=\"main\" onClick={handleClick}> \n        <Box x={x} y={y} speed={speed} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}